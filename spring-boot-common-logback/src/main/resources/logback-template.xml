<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF -->
<!-- configuration属性:
        scan: 默认值为true；当值为true时，配置文件如果发生改变，将会被重新加载
        scanPeriod: 监测配置文件修改的时间间隔，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟，即60000ms
        debug: 是否输出logback配置的加载过程，默认值为false。如果设置为true，就会输出logback配置加载的详细过程 -->
<configuration debug="false">
    <!-- 定义日志文件的存储路径 -->
    <property name="LOG_PATH" value="./log"/>
    <!-- 设置字符集 -->
    <property name="CHARSET" value="UTF-8"/>
    <!-- 文件的日志格式 -->
    <property name="FILE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"/>
    <!-- 单个日志文件最大值，达到之后就进行滚动 -->
    <property name="MaxFileSize" value="10MB"/>
    <!-- 日志文件保留的天数，也就是过期时间 -->
    <property name="MaxHistory" value="5"/>
    <!-- 日志文件总体的最大值，达到之后就不再产生日志 -->
    <property name="TotalSizeCap" value="100MB"/>

    <!-- 日志格式和颜色渲染 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>
    <!-- 控制台的日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!-- 输出到控制台 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <!-- 设置字符集 -->
            <charset>${CHARSET}</charset>
        </encoder>
    </appender>

    <!-- 输出所有日志到文件 -->
    <appender name="all" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/run.log</file>
        <!-- 日志文件输出格式 -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${CHARSET}</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <fileNamePattern>${LOG_PATH}/run-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>${MaxFileSize}</maxFileSize>
            <totalSizeCap>${TotalSizeCap}</totalSizeCap>
            <!-- 日志文件保留天数, 只有cleanHistoryOnStart为true并且maxHistory不为零才能生效 -->
            <maxHistory>${MaxHistory}</maxHistory>
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
    </appender>

    <!-- 输出DEBUG日志到文件 -->
    <appender name="debug" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/run_debug.log</file>
        <!-- 日志文件输出格式 -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${CHARSET}</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <fileNamePattern>${LOG_PATH}/run_debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>${MaxFileSize}</maxFileSize>
            <totalSizeCap>${TotalSizeCap}</totalSizeCap>
            <!-- 日志文件保留天数, 只有cleanHistoryOnStart为true并且maxHistory不为零才能生效 -->
            <maxHistory>${MaxHistory}</maxHistory>
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <!-- 此日志文件只记录debug级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 输出INFO日志到文件 -->
    <appender name="info" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/run_info.log</file>
        <!-- 日志文件输出格式 -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${CHARSET}</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <fileNamePattern>${LOG_PATH}/run_info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>${MaxFileSize}</maxFileSize>
            <totalSizeCap>${TotalSizeCap}</totalSizeCap>
            <!-- 日志文件保留天数, 只有cleanHistoryOnStart为true并且maxHistory不为零才能生效 -->
            <maxHistory>${MaxHistory}</maxHistory>
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <!-- 此日志文件只记录info级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 输出WARN日志到文件 -->
    <appender name="warn" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/run_warn.log</file>
        <!-- 日志文件输出格式 -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${CHARSET}</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <fileNamePattern>${LOG_PATH}/run_warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>${MaxFileSize}</maxFileSize>
            <totalSizeCap>${TotalSizeCap}</totalSizeCap>
            <!-- 日志文件保留天数, 只有cleanHistoryOnStart为true并且maxHistory不为零才能生效 -->
            <maxHistory>${MaxHistory}</maxHistory>
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <!-- 此日志文件只记录warn级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 输出ERROR日志到文件 -->
    <appender name="error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}/run_error.log</file>
        <!-- 日志文件输出格式 -->
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>${CHARSET}</charset>
        </encoder>
        <!-- 日志记录器的滚动策略，按日期，按大小记录 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <fileNamePattern>${LOG_PATH}/run_error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>
            <maxFileSize>${MaxFileSize}</maxFileSize>
            <totalSizeCap>${TotalSizeCap}</totalSizeCap>
            <!-- 日志文件保留天数, 只有cleanHistoryOnStart为true并且maxHistory不为零才能生效 -->
            <maxHistory>${MaxHistory}</maxHistory>
            <cleanHistoryOnStart>true</cleanHistoryOnStart>
        </rollingPolicy>
        <!-- 此日志文件只记录error级别的 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 只有在logger/root里引用了appender，appender才会生效 -->
    <!-- root是根logger， logger是子logger，即logger是root的子类 -->
    <loggers>
        <!-- logger用来设置某一个包或者具体的某一个类的日志打印级别
                 logger属性:
                    name: 用来指定受此logger约束的某一个包或者具体的某一个类
                    level: 用来设置日志的输出级别（日志级别）: ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF
                    additivity: 是否向上级logger传递日志的输出信息，默认是true
                                true: 会在当前logger和root的appender里输出信息
                                false: 只会在当前logger的appender里输出信息 -->
        <!-- 只输出spring的INFO及以上级别的日志 -->
        <logger name="org.springframework" level="INFO" additivity="false" />
        <!-- 1. root是<logger>元素，但是它是根logger，只有一个level属性
             2. 如果没有配置logger，那么就默认使用root输出日志
             3. root可以包含零个或多个<appender-ref>元素
             4. 只有在logger/root里引用了appender，appender才会生效
             5. root属性:
                    level: 用来设置日志的输出级别（日志级别）: ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF，默认是DEBUG
                    示例: INFO
                    描述: 输出INFO及以上级别的日志，如果level=INFO，那么即使引用了DEBUG的appender，也不会输出DEBUG级别的日志 -->
        <root level="DEBUG">
            <appender-ref ref="console"/>
            <appender-ref ref="all"/>
            <appender-ref ref="debug"/>
            <appender-ref ref="info"/>
            <appender-ref ref="warn"/>
            <appender-ref ref="error"/>
        </root>
    </loggers>
</configuration>